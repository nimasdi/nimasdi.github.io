<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://nimasdi.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nimasdi.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-16T19:38:59+00:00</updated><id>https://nimasdi.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">a post with math equation</title><link href="https://nimasdi.github.io/blog/2015/math/" rel="alternate" type="text/html" title="a post with math equation"/><published>2015-10-20T00:00:00+00:00</published><updated>2015-10-20T00:00:00+00:00</updated><id>https://nimasdi.github.io/blog/2015/math</id><content type="html" xml:base="https://nimasdi.github.io/blog/2015/math/"><![CDATA[<p>Just a cool equation i liked</p> \[\int_{-\infty}^{\infty} e^{-x^2} \,dx = \sqrt{\pi}\]]]></content><author><name></name></author><summary type="html"><![CDATA[This is a post with some math]]></summary></entry><entry><title type="html">a post with code</title><link href="https://nimasdi.github.io/blog/2015/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T00:00:00+00:00</published><updated>2015-07-15T00:00:00+00:00</updated><id>https://nimasdi.github.io/blog/2015/code</id><content type="html" xml:base="https://nimasdi.github.io/blog/2015/code/"><![CDATA[<p>This is implementation of bts in c</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="k">struct</span> <span class="n">Node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">left</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">createNode</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">newNode</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="nf">insertNode</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">createNode</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&gt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">insertNode</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">insertNode</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">calculateHeight</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">leftHeight</span> <span class="o">=</span> <span class="n">calculateHeight</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rightHeight</span> <span class="o">=</span> <span class="n">calculateHeight</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">leftHeight</span> <span class="o">&gt;</span> <span class="n">rightHeight</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">leftHeight</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">rightHeight</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">values</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">insertNode</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">treeHeight</span> <span class="o">=</span> <span class="n">calculateHeight</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">treeHeight</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[this is a post with code block in it]]></summary></entry><entry><title type="html">image post</title><link href="https://nimasdi.github.io/blog/2015/images/" rel="alternate" type="text/html" title="image post"/><published>2015-05-15T00:00:00+00:00</published><updated>2015-05-15T00:00:00+00:00</updated><id>https://nimasdi.github.io/blog/2015/images</id><content type="html" xml:base="https://nimasdi.github.io/blog/2015/images/"><![CDATA[<p>These are some places i like to visit someday</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/place1-480.webp 480w,/assets/img/place1-800.webp 800w,/assets/img/place1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/place1.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/place2-480.webp 480w,/assets/img/place2-800.webp 800w,/assets/img/place2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/place2.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/place3.jepg-480.webp 480w,/assets/img/place3.jepg-800.webp 800w,/assets/img/place3.jepg-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/place3.jepg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/place4.jepg-480.webp 480w,/assets/img/place4.jepg-800.webp 800w,/assets/img/place4.jepg-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/place4.jepg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><summary type="html"><![CDATA[this is a post with images]]></summary></entry></feed>